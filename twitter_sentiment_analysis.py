# -*- coding: utf-8 -*-
"""twitter_sentiment_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I2ebPp9hrHLaPe6hCWVf-jxEruE4TsSv
"""

#Importing Libraries
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import string
import nltk
import warnings

train = pd.read_csv('/content/train_E6oV3lV.csv')
test = pd.read_csv('/content/test_tweets_anuFYb8.csv')

train.head()

"""Cleaning Data"""

#### Removing twitter handles
def remove_pattern(input_txt, pattern):
    r = re.findall(pattern, input_txt)
    for word in r:
        input_txt = re.sub(word, "", input_txt)
    return re.sub(pattern, '', input_txt)

train['clean_tweet'] = np.vectorize(remove_pattern)(train['tweet'], "@[\w]*")

##### Removing puntuations, special characters and numbers
train['clean_tweet'] = train['clean_tweet'].str.replace("[^a-zA-Z#]", " ")

#### Removing short words
train['clean_tweet'] = train['clean_tweet'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>3]))

train.head()

#### Tokenization
def tokenize(text):
    return text.split()

tokenized_tweet = train['clean_tweet'].apply(tokenize)

tokenized_tweet.head()

#### Stemming
from nltk.stem.porter import *
stemmer = PorterStemmer()

tokenized_tweet = tokenized_tweet.apply(lambda x: [stemmer.stem(i) for i in x])
tokenized_tweet.head()

for i in range(len(tokenized_tweet)):
    tokenized_tweet[i] = ' '.join(tokenized_tweet[i])

train['clean_tweet'] = tokenized_tweet

"""Visualisation"""

#### common words used in tweets using wordcloud
all_words = ' '.join([text for text in train['clean_tweet']])
from wordcloud import WordCloud
wordcloud = WordCloud(width=500, height=500, random_state=21, max_font_size=110).generate(all_words)

plt.figure(figsize=(10, 7))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis('off')
plt.show()

#### non - racist/ sexist tweets
normal_words =' '.join([text for text in train['clean_tweet'][train['label'] == 0]])

wordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(normal_words)
plt.figure(figsize=(10, 7))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis('off')
plt.show()

#### racit/ sexist tweets
normal_words =' '.join([text for text in train['clean_tweet'][train['label'] == 1]])

wordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(normal_words)
plt.figure(figsize=(10, 7))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis('off')
plt.show()

### Analysing the impacts of hashtags
def hashtag_extract(x):
    hashtags = []
    for i in x:
        ht = re.findall(r"#(\w+)", i)
        hashtags.append(ht)

    return hashtags
HT_regular = hashtag_extract(train['clean_tweet'][train['label'] == 0])
HT_negative = hashtag_extract(train['clean_tweet'][train['label'] == 1])
HT_regular = sum(HT_regular,[])
HT_negative = sum(HT_negative,[])

### hashtag impact on non racist/ sexist tweets
a = nltk.FreqDist(HT_regular)
d = pd.DataFrame({'Hashtag': list(a.keys()),'Count': list(a.values())})
d = d.nlargest(columns="Count", n = 10)
plt.figure(figsize=(16,5))
ax = sns.barplot(data=d, x= "Hashtag", y = "Count")
ax.set(ylabel = 'Count')
plt.show()

### hashtag impact on racist/sexist tweets
b = nltk.FreqDist(HT_negative)
e = pd.DataFrame({'Hashtag': list(b.keys()), 'Count': list(b.values())})
e = e.nlargest(columns="Count", n = 10)
plt.figure(figsize=(16,5))
ax = sns.barplot(data=e, x= "Hashtag", y = "Count")
ax.set(ylabel = 'Count')
plt.show()

"""Feature Extraction"""

#### applying bag-of-words
from sklearn.feature_extraction.text import CountVectorizer
bow_vectorizer = CountVectorizer(max_df=0.90, min_df=2, max_features=1000, stop_words='english')
# bag-of-words feature matrix
bow = bow_vectorizer.fit_transform(train['clean_tweet'])

#### TF-IDF Features
from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(max_df=0.90, min_df=2, max_features=1000, stop_words='english')
# TF-IDF feature matrix
tfidf = tfidf_vectorizer.fit_transform(train['clean_tweet'])

"""Model Building"""

### Model using bag-of-words with logistic regression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score

train_bow = bow[:31962,:]
test_bow = bow[31962:,:]
xtrain_bow, xvalid_bow, ytrain, yvalid = train_test_split(train_bow, train['label'], random_state=42, test_size=0.3)

lreg = LogisticRegression()
lreg.fit(xtrain_bow, ytrain)

prediction = lreg.predict_proba(xvalid_bow)
prediction_int = prediction[:,1] >= 0.3 # if prediction is greater than or equal to 0.3 than 1 else 0
prediction_int = prediction_int.astype(int)

f1_score(yvalid, prediction_int)

### Model using bag-of words with XGBoost
import xgboost as xgb
from xgboost import XGBClassifier

xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(xtrain_bow, ytrain)
prediction_proba = xgb_model.predict_proba(xvalid_bow)
prediction_int = (prediction_proba[:, 1] >= 0.3).astype(int)
f1_score(yvalid, prediction_int)

### Model using bag-of-words with SVM
from sklearn import svm
svm_model = svm.SVC(probability=True)
svm_model.fit(xtrain_bow, ytrain)
prediction_proba = svm_model.predict_proba(xvalid_bow)
prediction_int = (prediction_proba[:, 1] >= 0.3).astype(int)

f1_score(yvalid, prediction_int)

#### Model using TF-IDF with Linear Regression
train_tfidf = tfidf[:31962,:]
test_tfidf = tfidf[31962:,:]

xtrain_tfidf = train_tfidf[ytrain.index]
xvalid_tfidf = train_tfidf[yvalid.index]

lreg = LogisticRegression()
lreg.fit(xtrain_tfidf, ytrain)

prediction = lreg.predict_proba(xvalid_tfidf)
prediction_int = prediction[:,1] >= 0.3
prediction_int = prediction_int.astype(int)

f1_score(yvalid, prediction_int)

#### Model using TF-IDF with XG Boost
train_tfidf = tfidf[:31962, :]
test_tfidf = tfidf[31962:, :]
xtrain_tfidf = train_tfidf[ytrain.index]
xvalid_tfidf = train_tfidf[yvalid.index]
xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(xtrain_tfidf, ytrain)
prediction_proba = xgb_model.predict_proba(xvalid_tfidf)
prediction_int = (prediction_proba[:, 1] >= 0.3).astype(int)
f1_score(yvalid, prediction_int)

#### Model using TF-IDF with SVM
train_tfidf = tfidf[:31962, :]
test_tfidf = tfidf[31962:, :]
xtrain_tfidf = train_tfidf[ytrain.index]
xvalid_tfidf = train_tfidf[yvalid.index]
svm_model = svm.SVC(probability=True)
svm_model.fit(xtrain_tfidf, ytrain)
prediction_proba = svm_model.predict_proba(xvalid_tfidf)
prediction_int = (prediction_proba[:, 1] >= 0.3).astype(int)
f1_score(yvalid, prediction_int)